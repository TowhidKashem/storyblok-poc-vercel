
webhooks

generate static site, do all pages work?

draft vs published copies
apps
translations
optimizely
seo, add seo fields
user roles
deploy, give them dashboard access
adding completely new page



Bitly.com sitemap:

  > Homepage

  Header navigation:

    > Why Bitly? (not a page)
      - Bitly 101
      - Integrations & API
      - Enterprise Class

    > Solutions (not a page)
      - Social Media
      - Digial Marketing
      - Customer Service
      - For Developers

    > Features (not a page)
      - Link Management
      - Branded Links
      - Mobile Links
      - Campaign Management & Analytics
      - QR Codes

    > Pricing

    > Resources (not a page)
      - Resource Library

      External codebases:
        - Blog (wordpress)
        - Developers (dev site)
        - Support (zendesk)


  Footer navigation:

    > Legal (not a page):
      - Privacy Policy
      - Terms of Service

    > Company (not a page):
      - About Bitly
      - Careers
      - Partners
      - Press
      - Contact
      - Reviews


  Auth pages (external python/tornado codebase):

    - Sign In
    - Sign Up
    - SSO Sign In
    - Google sign up confirmation page

    - Forgot password (older site style)



Tech stack:

  - Storyblok - api/admin panel

  - Nextjs (React framework) - frontend
    - Uses static site generator (SSG) feature to build static files. The entire website is static files only (html/css/js) for better speed, security and SEO

  - Tailwind - css framework

  - Deploys via webhook
    - Clicking the "publish" button on Storyblok's admin panel will update the data in the API (immediately)
    - It will also trigger a webhook which hit's an endpoint we will make that will rebuild the static site and upload it to our host to update the front end (in a minute or two)

  - Merged code changes cause the site to be rebuilt via deploy script and webhook
    - Our deploy script will need to be updated to check if any changes were made in the marketing site's sub folder in the monorepo when code is merged, and if so, to hit the same endpoint to rebuild and reupload the site's files


MISC:

  - URL formats won't be changed, new site will also be static like the current one, so keywords and content will still appear in the HTML page source


  - turn bitly's component lib into a npm package so that it can be shared across apps (web app, marketing site, browser extension, etc)
  - in the future rewrite the blog using something like https://frontity.org/ which is a React framework that uses wordpress as a headless CMS

  - add nice animations
  - point out how current site uses huge images


https://bitly.com/pages/landing/discover-enterprise






Blog Questions:
  313 blog posts, load more button is disabled after that
  are related articles section based on some logic or just random?
























Space = website

Story = a page with content

Content type = page template (used by the story)

Blok = components that make up the content type

Folder = can be used to group stories e.g. /posts/*





// import { useEffect } from 'react';
// import { getStories } from '@utils/api';


  // (async () => {
  //   try {
  //     const stories = await getStories({
  //       starts_with: 'blog/category'
  //     });

  //     console.log('test', stories);
  //   } catch (err) {
  //     console.log(err);
  //   }
  // })();
